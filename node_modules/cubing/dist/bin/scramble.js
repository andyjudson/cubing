#!/usr/bin/env node

// src/bin/scramble.ts
import { eventInfo } from "cubing/puzzles";
import { randomScrambleForEvent } from "cubing/scramble";
import { setSearchDebug } from "cubing/search";
var [yargs, hideBin] = await (async () => {
  try {
    const yargs2 = (await import("yargs")).default;
    const { hideBin: hideBin2 } = await import("yargs/helpers");
    return [yargs2, hideBin2];
  } catch (e) {
    throw new Error(
      "Could not import `yargs`, which is not automatically installed as a regular dependency of `cubing`. Please run `npm install yargs` (or the equivalent) separately."
    );
  }
})();
var argv = await yargs(
  // TODO: `hideBin` just shows `bun` in `bun`.
  hideBin(process.argv)
).option("amount", {
  describe: "Amount of scrambles.",
  default: 1,
  type: "number",
  alias: "n"
}).option("format", {
  describe: "Output format.",
  choices: ["text", "link", "json-text"],
  alias: "f"
}).option("text", {
  type: "boolean",
  describe: "Convenient shorthand for `--format text`.",
  alias: "t"
}).usage(
  "$0 eventID",
  "Generate cubing scrambles.",
  (yargs2) => yargs2.positional("eventID", {
    describe: "WCA or unofficial event ID",
    type: "string"
  })
).version(false).strictOptions().argv;
var eventID = argv.eventID;
var { format } = argv;
format ??= argv.text || !process.stdout.isTTY ? "text" : "auto";
setSearchDebug({ logPerf: false, showWorkerInstantiationWarnings: false });
function scrambleText(scramble) {
  return scramble.toString();
}
function scrambleLink(scramble) {
  const url = new URL("https://alpha.twizzle.net/edit/");
  const puzzleID = eventInfo(eventID)?.puzzleID;
  puzzleID && url.searchParams.set("puzzle", puzzleID);
  url.searchParams.set("alg", scramble.toString());
  return url.toString();
}
var JSONListPrinter = class {
  #finished = false;
  #firstValuePrintedAlready = false;
  constructor() {
    process.stdout.write("[\n  ");
  }
  push(value) {
    if (this.#firstValuePrintedAlready) {
      process.stdout.write(",\n  ");
    }
    this.#firstValuePrintedAlready = true;
    process.stdout.write(JSON.stringify(value));
  }
  finish() {
    if (this.#finished) {
      throw new Error("Tried to finish JSON list printing multiple times.");
    }
    this.#finished = true;
    console.log("\n]");
  }
};
if (format !== "json-text" && argv.amount === 1) {
  const scramble = await randomScrambleForEvent(eventID);
  switch (format) {
    case "text": {
      console.log(scrambleText(scramble));
      break;
    }
    case "link": {
      console.log(scrambleLink(scramble));
      break;
    }
    case "json-text": {
      throw new Error(
        "Encountered `json` format in code that is not expected to handle it."
      );
    }
    case "auto": {
      console.log(`${scrambleText(scramble)}

\u{1F517} ${scrambleLink(scramble)}`);
      break;
    }
    default: {
      throw new Error("Unknown format!");
    }
  }
} else {
  const jsonListPrinter = format === "json-text" ? new JSONListPrinter() : void 0;
  for (let i = 0; i < argv.amount; i++) {
    const scramble = await randomScrambleForEvent(eventID);
    switch (format) {
      case "text": {
        console.log(`// Scramble #${i + 1}`);
        console.log(`${scrambleText(scramble)}
`);
        break;
      }
      case "link": {
        console.log(`// Scramble #${i + 1}`);
        console.log(`${scrambleLink(scramble)}
`);
        break;
      }
      case "json-text": {
        jsonListPrinter?.push(scramble.toString());
        break;
      }
      case "auto": {
        console.log(`// Scramble #${i + 1}
${scrambleText(scramble)}

\u{1F517} ${scrambleLink(scramble)}
`);
        break;
      }
      default: {
        throw new Error("Unknown format!");
      }
    }
  }
  jsonListPrinter?.finish();
}
//# sourceMappingURL=scramble.js.map
