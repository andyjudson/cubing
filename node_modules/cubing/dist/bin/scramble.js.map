{
  "version": 3,
  "sources": ["../../src/bin/scramble.ts"],
  "sourcesContent": ["// To run this file directly:\n// bun run src/bin/scramble.ts -- 333\n\nimport { eventInfo } from \"cubing/puzzles\";\nimport { randomScrambleForEvent } from \"cubing/scramble\";\nimport { setSearchDebug } from \"cubing/search\";\nimport type { Alg } from \"cubing/alg\";\n\n// TODO: completions for `bash`, `zsh`, and `fish`: https://github.com/loilo/completarr\n\nconst [yargs, hideBin] = await (async () => {\n  try {\n    const yargs = (await import(\"yargs\")).default;\n    const { hideBin } = await import(\"yargs/helpers\");\n    return [yargs, hideBin];\n  } catch (e) {\n    throw new Error(\n      \"Could not import `yargs`, which is not automatically installed as a regular dependency of `cubing`. Please run `npm install yargs` (or the equivalent) separately.\",\n    );\n  }\n})();\n\n// @ts-ignore: Top-level await is okay because this is not part of the main library.\nconst argv = await yargs(\n  // TODO: `hideBin` just shows `bun` in `bun`.\n  hideBin(process.argv),\n)\n  .option(\"amount\", {\n    describe: \"Amount of scrambles.\",\n    default: 1,\n    type: \"number\",\n    alias: \"n\",\n  })\n  .option(\"format\", {\n    describe: \"Output format.\",\n    choices: [\"text\", \"link\", \"json-text\"],\n    alias: \"f\",\n  })\n  .option(\"text\", {\n    type: \"boolean\",\n    describe: \"Convenient shorthand for `--format text`.\",\n    alias: \"t\",\n  })\n  .usage(\"$0 eventID\", \"Generate cubing scrambles.\", (yargs) =>\n    yargs.positional(\"eventID\", {\n      describe: \"WCA or unofficial event ID\",\n      type: \"string\",\n    }),\n  )\n  .version(false) // TODO: why doesn't `yargs` get the right version in `bun` or for the `dist` bin?\n  .strictOptions().argv;\n\nconst eventID = argv.eventID as string;\nlet { format } = argv;\nformat ??= argv.text || !process.stdout.isTTY ? \"text\" : \"auto\";\n\nsetSearchDebug({ logPerf: false, showWorkerInstantiationWarnings: false });\n\nfunction scrambleText(scramble: Alg): string {\n  return scramble.toString();\n}\n\nfunction scrambleLink(scramble: Alg): string {\n  const url = new URL(\"https://alpha.twizzle.net/edit/\");\n  const puzzleID = eventInfo(eventID)?.puzzleID;\n  puzzleID && url.searchParams.set(\"puzzle\", puzzleID);\n  url.searchParams.set(\"alg\", scramble.toString());\n  return url.toString();\n}\n\nclass JSONListPrinter<T> {\n  #finished = false;\n  #firstValuePrintedAlready = false;\n  constructor() {\n    process.stdout.write(\"[\\n  \");\n  }\n\n  push(value: T) {\n    if (this.#firstValuePrintedAlready) {\n      process.stdout.write(\",\\n  \");\n    }\n    this.#firstValuePrintedAlready = true;\n    process.stdout.write(JSON.stringify(value));\n  }\n\n  finish() {\n    if (this.#finished) {\n      throw new Error(\"Tried to finish JSON list printing multiple times.\");\n    }\n    this.#finished = true;\n    console.log(\"\\n]\");\n  }\n}\n\nif (format !== \"json-text\" && argv.amount === 1) {\n  // @ts-ignore: Top-level await is okay because this is not part of the main library.\n  const scramble = await randomScrambleForEvent(eventID);\n\n  switch (format) {\n    case \"text\": {\n      console.log(scrambleText(scramble));\n      break;\n    }\n    case \"link\": {\n      console.log(scrambleLink(scramble));\n      break;\n    }\n    case \"json-text\": {\n      throw new Error(\n        \"Encountered `json` format in code that is not expected to handle it.\",\n      );\n    }\n    case \"auto\": {\n      console.log(`${scrambleText(scramble)}\n\n\uD83D\uDD17 ${scrambleLink(scramble)}`);\n      break;\n    }\n    default: {\n      throw new Error(\"Unknown format!\");\n    }\n  }\n} else {\n  const jsonListPrinter: JSONListPrinter<string> | undefined =\n    format === \"json-text\" ? new JSONListPrinter() : undefined;\n  for (let i = 0; i < argv.amount; i++) {\n    // @ts-ignore: Top-level await is okay because this is not part of the main library.\n    const scramble = await randomScrambleForEvent(eventID);\n    switch (format) {\n      case \"text\": {\n        console.log(`// Scramble #${i + 1}`);\n        console.log(`${scrambleText(scramble)}\\n`);\n        break;\n      }\n      case \"link\": {\n        console.log(`// Scramble #${i + 1}`);\n        console.log(`${scrambleLink(scramble)}\\n`);\n        break;\n      }\n      case \"json-text\": {\n        jsonListPrinter?.push(scramble.toString());\n        break;\n      }\n      case \"auto\": {\n        console.log(`// Scramble #${i + 1}\n${scrambleText(scramble)}\n\n\uD83D\uDD17 ${scrambleLink(scramble)}\n`);\n        break;\n      }\n      default: {\n        throw new Error(\"Unknown format!\");\n      }\n    }\n  }\n  jsonListPrinter?.finish();\n}\n"],
  "mappings": "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",
  "names": ["yargs", "hideBin"]
}
