{
  "version": 3,
  "sources": ["../../src/bin/order.ts"],
  "sourcesContent": ["// To run this file directly:\n// bun run src/bin/order.ts -- <program args>\n\nimport { KPuzzle } from \"cubing/kpuzzle\";\nimport { getPuzzleGeometryByName } from \"cubing/puzzle-geometry\";\nimport { puzzles } from \"cubing/puzzles\";\n\n/*\n *   Given a puzzle name and an algorithm, calculate the order of that\n *   algorithm (how many repetitions are needed for the algorithm to be\n *   the no-op).\n */\n\nconst puzzleName = process.argv[2];\nconst algString = process.argv[3];\n\nif (!(puzzleName && algString)) {\n  console.log(\"Usage: order <puzzle-geometry-id> <alg>\");\n  console.log(\"\");\n  console.log(\"Example: order 3x3x3 \\\"R U R' U R U2' R'\\\"\");\n  process.exit(0);\n}\n\n/*\n *   Turn a name into a geometry.\n */\n\n// @ts-ignore: Top-level await is okay because this is not part of the main library.\nlet kpuzzle = await puzzles[puzzleName].kpuzzle();\nif (!kpuzzle) {\n  const pg = getPuzzleGeometryByName(puzzleName, { allMoves: true });\n  kpuzzle = new KPuzzle(pg.getKPuzzleDefinition(true));\n}\nconst order = kpuzzle.algToTransformation(algString).repetitionOrder();\nconsole.log(order);\n"],
  "mappings": ";;;AAGA,SAAS,eAAe;AACxB,SAAS,+BAA+B;AACxC,SAAS,eAAe;AAQxB,IAAM,aAAa,QAAQ,KAAK,CAAC;AACjC,IAAM,YAAY,QAAQ,KAAK,CAAC;AAEhC,IAAI,EAAE,cAAc,YAAY;AAC9B,UAAQ,IAAI,yCAAyC;AACrD,UAAQ,IAAI,EAAE;AACd,UAAQ,IAAI,0CAA4C;AACxD,UAAQ,KAAK,CAAC;AAChB;AAOA,IAAI,UAAU,MAAM,QAAQ,UAAU,EAAE,QAAQ;AAChD,IAAI,CAAC,SAAS;AACZ,QAAM,KAAK,wBAAwB,YAAY,EAAE,UAAU,KAAK,CAAC;AACjE,YAAU,IAAI,QAAQ,GAAG,qBAAqB,IAAI,CAAC;AACrD;AACA,IAAM,QAAQ,QAAQ,oBAAoB,SAAS,EAAE,gBAAgB;AACrE,QAAQ,IAAI,KAAK;",
  "names": []
}
