{
  "version": 3,
  "sources": ["../../../../src/cubing/search/inside/solve/parseSGS.ts"],
  "sourcesContent": ["import { Alg } from \"../../../alg\";\nimport type { KPuzzle, KTransformation } from \"../../../kpuzzle\";\n\ninterface PieceReference {\n  orbitName: string;\n  permutationIdx: number;\n}\n\nexport interface SGSAction {\n  alg: Alg;\n  transformation: KTransformation;\n}\n\nexport interface SGSCachedData {\n  ordering: {\n    pieceOrdering: PieceReference[];\n    lookup: Record<string, SGSAction>;\n  }[];\n}\n\nexport function parseSGS(kpuzzle: KPuzzle, sgs: string): SGSCachedData {\n  const subgroupSizes: number[] = [];\n  const sgsActions: SGSAction[] = [];\n  for (const line of sgs.split(\"\\n\")) {\n    const lineTokens = line.split(\" \");\n    if (line.startsWith(\"SetOrder \")) {\n      // ignore\n    } else if (line.startsWith(\"Alg \")) {\n      const alg = Alg.fromString(line.substring(4));\n      sgsActions.push({\n        alg: alg,\n        transformation: kpuzzle.algToTransformation(alg),\n      });\n    } else if (line.startsWith(\"SubgroupSizes \")) {\n      for (let j = 1; j < lineTokens.length; j++) {\n        subgroupSizes.push(parseInt(lineTokens[j]));\n      }\n    }\n  }\n\n  const sgsCachedData: SGSCachedData = {\n    ordering: new Array(subgroupSizes.length),\n  };\n  const subgroupAlgOffsets: number[] = [];\n  let sum = 0;\n  subgroupAlgOffsets.push(0);\n  const emptyAlg = Alg.fromString(\"\");\n  const identity = kpuzzle.identityTransformation();\n  for (let i = 0; i < subgroupSizes.length; i++) {\n    sum += subgroupSizes[i];\n    subgroupAlgOffsets.push(sum);\n    sgsActions.splice(sum - 1, 0, { alg: emptyAlg, transformation: identity });\n  }\n  if (sgsActions.length !== sum) {\n    throw Error(\n      `Bad sgs; expected ${sum - subgroupSizes.length} algs but saw ${\n        sgsActions.length - subgroupSizes.length\n      }`,\n    );\n  }\n  const processedPieces: Record<string, boolean[]> = {};\n  for (const orbitDefinition of kpuzzle.definition.orbits) {\n    processedPieces[orbitDefinition.orbitName] = new Array(\n      orbitDefinition.numPieces,\n    ).fill(false);\n  }\n  for (let i = subgroupSizes.length - 1; i >= 0; i--) {\n    const pieceOrdering: PieceReference[] = [];\n    for (let j = subgroupAlgOffsets[i]; j < subgroupAlgOffsets[i + 1]; j++) {\n      const transformation = sgsActions[j].transformation;\n      for (const orbitDefinition of kpuzzle.definition.orbits) {\n        for (let idx = 0; idx < orbitDefinition.numPieces; idx++) {\n          if (\n            transformation.transformationData[orbitDefinition.orbitName]\n              .permutation[idx] !== idx ||\n            transformation.transformationData[orbitDefinition.orbitName]\n              .orientationDelta[idx] !== 0\n          ) {\n            if (!processedPieces[orbitDefinition.orbitName][idx]) {\n              pieceOrdering.push({\n                orbitName: orbitDefinition.orbitName,\n                permutationIdx: idx,\n              });\n              processedPieces[orbitDefinition.orbitName][idx] = true;\n            }\n          }\n        }\n      }\n    }\n    const lookup: Record<string, SGSAction> = {};\n    for (let j = subgroupAlgOffsets[i]; j < subgroupAlgOffsets[i + 1]; j++) {\n      const transformation = sgsActions[j].transformation.invert();\n      let key = \"\";\n      for (let k = 0; k < pieceOrdering.length; k++) {\n        const loc = pieceOrdering[k];\n        key = `${key} ${\n          transformation.transformationData[loc.orbitName].permutation[\n            loc.permutationIdx\n          ]\n        } ${\n          transformation.transformationData[loc.orbitName].orientationDelta[\n            loc.permutationIdx\n          ]\n        }`;\n      }\n      lookup[key] = sgsActions[j];\n      sgsActions[j].alg = sgsActions[j].alg.invert();\n      sgsActions[j].transformation = sgsActions[j].transformation.invert();\n    }\n    sgsCachedData.ordering[i] = {\n      pieceOrdering: pieceOrdering,\n      lookup: lookup,\n    };\n  }\n  return sgsCachedData;\n}\n"],
  "mappings": "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",
  "names": []
}
