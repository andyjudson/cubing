{
  "version": 3,
  "sources": ["../../../../src/cubing/vendor/mpl/xyzzy/master_tetraminx-solver.js"],
  "sourcesContent": ["/* master pyraminx scramble generator */\n// From https://gist.github.com/torchlight/9a5c53da09d8e090756a228f4b5f3471\n// Added to `cubing.js` under the GPL license by permission from the author (@torchlight/xyzzy).\n\n\"use strict\";\n\nimport { randomUIntBelow } from \"random-uint-below\";\n\nfunction counter(A) {\n  let counts = [];\n  for (let a of A) {\n    counts[a] = (counts[a] || 0) + 1;\n  }\n  return counts;\n}\n\n/* Combinatoric functions */\n\nfunction factorial(n) {\n  if (n < 2) {\n    return n;\n  }\n  let f = 1;\n  for (let i = 2; i <= n; i++) {\n    f *= i;\n  }\n  return f;\n}\n\nfunction identity_permutation(n) {\n  let a = Array(n);\n  for (let i = 0; i < n; i++) {\n    a[i] = i;\n  }\n  return a;\n}\n\nfunction permutation_to_index(perm) {\n  perm = perm.slice();\n  let n = perm.length;\n  let f = factorial(n - 1);\n  let ind = 0;\n  while (n > 1) {\n    n--;\n    // invariant: f === factorial(n)\n    // also, perm stores meaningful values up to perm[n]\n    let e = perm[0];\n    ind += e * f;\n    for (let i = 0; i < n; i++) {\n      let x = perm[i + 1];\n      perm[i] = x - (x > e);\n    }\n    f /= n;\n  }\n  return ind;\n}\n\nfunction index_to_permutation(ind, n) {\n  let perm = [];\n  let f = factorial(n - 1);\n  for (let i = 0; i < n; i++) {\n    perm[i] = (ind / f) | 0;\n    ind %= f;\n    f /= n - 1 - i;\n  }\n  for (let i = n - 2; i >= 0; i--) {\n    for (let j = i + 1; j < n; j++) {\n      perm[j] += +(perm[j] >= perm[i]);\n    }\n  }\n  return perm;\n}\n\nfunction permutation_parity(A) {\n  let n = A.length;\n  let parity = 0;\n  for (let i = 0; i < n - 1; i++) {\n    for (let j = i; j < n; j++) {\n      if (A[i] > A[j]) {\n        parity ^= 1;\n      }\n    }\n  }\n  return parity;\n}\n\nfunction index_to_evenpermutation(ind, n) {\n  let perm = [];\n  let f = factorial(n - 1) / 2;\n  let parity = 0;\n  for (let i = 0; i < n - 1; i++) {\n    perm[i] = (ind / f) | 0;\n    ind %= f;\n    f /= n - 1 - i;\n  }\n  perm[n - 1] = 0;\n  for (let i = n - 2; i >= 0; i--) {\n    for (let j = i + 1; j < n; j++) {\n      if (perm[j] >= perm[i]) {\n        perm[j]++;\n      } else {\n        parity ^= 1;\n      }\n    }\n  }\n  if (parity === 1) {\n    [perm[n - 2], perm[n - 1]] = [perm[n - 1], perm[n - 2]];\n  }\n  return perm;\n}\n\nfunction evenpermutation_to_index(perm) {\n  return permutation_to_index(perm) >> 1;\n}\n\nlet [evenpermutation12_to_index, index_to_evenpermutation12] = (() => {\n  let index_in_set_bits = new Int8Array(4096 * 12);\n  let look_up_set_bits = new Int8Array(4096 * 12);\n  for (let i = 0; i < 4096; i++) {\n    for (let j = 0, counter = 0; j < 12; j++) {\n      if (((i >>> j) & 1) === 0) {\n        continue;\n      }\n      index_in_set_bits[(j << 12) | i] = counter;\n      look_up_set_bits[(counter << 12) | i] = j;\n      counter++;\n    }\n  }\n\n  function evenpermutation12_to_index(perm) {\n    let unused = 0xfff; // track which values in 0..11 haven't been used so far\n    let f = 19958400; // = 11!/2\n    let ind = 0;\n    for (let i = 0; i < 10; i++) {\n      let v = perm[i];\n      ind += index_in_set_bits[unused | (v << 12)] * f;\n      unused &= ~(1 << v);\n      f /= 11 - i;\n    }\n    return ind;\n  }\n\n  function index_to_evenpermutation12(ind, perm) {\n    let unused = 0xfff;\n    let f = 19958400; // = 11!/2\n    let parity = 0;\n    for (let i = 0; i < 10; i++) {\n      let a = (ind / f) | 0;\n      ind -= a * f;\n      parity ^= a & 1;\n      let v = look_up_set_bits[unused | (a << 12)];\n      perm[i] = v;\n      unused &= ~(1 << v);\n      f /= 11 - i;\n    }\n    // the last two elements are uniquely determined by the other ten\n    perm[10] = look_up_set_bits[unused | (parity << 12)];\n    perm[11] = look_up_set_bits[unused | ((parity ^ 1) << 12)];\n    return perm;\n  }\n\n  // these functions could be significantly faster with SWAR, but we can't SWAR here without 64-bit\n  // bitwise ops. :<\n\n  return [evenpermutation12_to_index, index_to_evenpermutation12];\n})();\n\nfunction compose(A, B) {\n  let C = [];\n  for (let i = 0; i < B.length; i++) {\n    C[i] = A[B[i]];\n  }\n  return C;\n}\n\nfunction double_compose(A, B, C) {\n  let D = [];\n  for (let i = 0; i < C.length; i++) {\n    D[i] = A[B[C[i]]];\n  }\n  return D;\n}\n\nfunction invert(perm) {\n  let inv = [];\n  for (let i = 0; i < perm.length; i++) {\n    inv[perm[i]] = i;\n  }\n  return inv;\n}\n\nfunction permutation_from_cycle(cycle, n) {\n  let perm = [];\n  for (let i = 0; i < n; i++) {\n    perm[i] = i;\n  }\n  for (let i = 0; i < cycle.length; i++) {\n    perm[cycle[i]] = cycle[(i + 1) % cycle.length];\n  }\n  return perm;\n}\n\nfunction permutation_from_cycles(cycles, n) {\n  if (cycles.length === 0) {\n    return identity_permutation(n);\n  }\n  return cycles\n    .map((cycle) => permutation_from_cycle(cycle, n))\n    .reduce(compose);\n  // not very efficient, but this function is only called during init so it's fine\n}\n\n/* puzzle-specific stuff */\n\n/*\nWe will (mostly) ignore the trivial tips here. When we say \"single-layer\", we mean one layer\n*excluding* the tip, so it's really two layers on the physical puzzle; likewise, \"double-layer\"\nmeans three layers on the physical puzzle. Hopefully this won't be too confusing.\n\nTips (\"zero-layer\" moves?) are written with a single lowercase letter: u, l, r, b.\nSingle-layer moves are written with a single uppercase letter: U, L, R, B.\nDouble-layer moves are written with a single uppercase letter and a w suffix: Uw, Lw, Rw, Bw.\n\nThe master pyraminx has four types of pieces:\n- 4 corners (same as pyraminx); three orientations each (no permutation).\n- 6 midges (same as pyraminx); even permutation, two orientations each, sum(orientations)%2 = 0.\n- 12 wings; even permutation (no orientation).\n- 4 centres; even permutation (no visible orientation).\n\nThe total number of states is (3^4) * (6!/2 * 2^5) * (12!/2) * (4!/2) = 2 681 795 837 952 000.\n\nThis is small enough that an optimal solver is feasible *if* we can use large pruning tables, but\nif we want to keep init times short, a two-phase algorithm would be much better. Here, we will use a\ntwo-phase reduction algorithm: the first phase reduces to a Halpern-Meier Pyramid / Jing's pyraminx,\nand the second phase just solves that (using only double-layer moves).\n\nSome ~group theory~ flexing: the alternating group A_4 (acting on the centres) has a copy of the\nKlein four-group V as a normal subgroup of index 3. We can name the cosets (other than V itself) as\nthe cw coset if the elements are a clockwise 3-cycle (as viewed from a corner) and the ccw coset if\nthe elements are an anticlockwise 3-cycle. On the H-M pyra, (the name of) the V-coset of the centres\nis exactly the sum of the orientations of the corners mod 3; this follows from V being a normal\nsubgroup of A_4.\n\n---\n\nIn the first phase, we:\n(i) do edge pairing (12!/2 ~ 2.4e8);\n(ii) ensure the V-coset of the centres matches the corner orientations (3).\n\nRelevant coordinates:\nlocations of a midge and its matching wings + centre stuff ((6*12*11) * 3 = 2376)\n\nPruning table:\n- forming two tredges + centre stuff ((6*5*12*11*10*9) * 3 = 1069200)\n- counting solved wings versus flipped wings + centre stuff (21 * 2 = 42)\n\nThe first pruning table takes around a quarter of a second to generate, which is kinda slow, but it\ncan't be helped. We check all fifteen possible pairs. (Checking only three pairs is enough, but has\nvery poor worst-case performance.)\n\nThe second pruning table takes literally an hour to generate, but it's also small so we just hard-\ncode all of its values instead of computing it on initialisation. Using this table kills off worst-\ncase behaviour on \"bad\" scrambles, but doesn't do a lot on \"median\" scrambles.\n\n---\n\nIn the second phase, we solve the puzzle like a H-M pyra.\n\nRelevant coordinates:\n(i) edge permutation, location of yellow centre (6!/2 * 4 = 1440)\n(ii) edge orientation, corner orientation (2^5 * 3^4 = 2592)\n\nCorner orientation uniquely determines the V-coset of the centre permutation, and since V acts\nsharply transitively on the centres, knowing where the yellow centre is uniquely determines which\nelement of that V-coset is the centre permutation.\n\n---\n\nConsiderations for generating scrambles:\n\nTip scrambling: the standard pyraminx scramblers just put the tips at the end of the scramble. This\nis *really bad* when we're doing the scrambles by hand and then immediately solving afterwards.\nIdeally, the scramble sequence shouldn't reveal any obvious information about the scramble.\n\nLike 333 and a few other puzzles, the states of a master pyra have a group structure, and so we can\ntake inverses. Once we have generated a random state, we can return either the inverse of its\nsolution, or the solution of its inverse. Since inversion preserves uniformity, we could just as\nwell just directly return a solution of a random state.\n\n---\n\n(ASCII nets modified from TNoodle's source code comments)\n\ncorners:\n\n*           ____  ____                      ____  ____\n*         /\\    /\\    /\\                  /\\    /\\    /\\\n*        /3 \\  /  \\  /0 \\       U        /0 \\  /  \\  /3 \\\n*       /____\\/____\\/____\\     ____     /____\\/____\\/____\\\n*       \\    /\\    /\\    /   /\\    /\\   \\    /\\    /\\    /\n*        \\  /  \\  /  \\  /   /  \\0 /  \\   \\  /  \\  /  \\  /\n*         \\/____\\/____\\/   /____\\/____\\   \\/____\\/____\\/\n*          \\    /\\    /   /\\    /\\    /\\   \\    /\\    /\n*           \\  /1 \\  /   /  \\  /  \\  /  \\   \\  /2 \\  /\n*            \\/____\\/   /____\\/____\\/____\\   \\/____\\/\n*                       \\    /\\    /\\    /\n*                        \\1 /  \\  /  \\2 /\n*                    L    \\/____\\/____\\/    R\n*\n*                           ____  ____\n*                         /\\    /\\    /\\\n*                        /1 \\  /  \\  /2 \\\n*                       /____\\/____\\/____\\\n*                       \\    /\\    /\\    /\n*                        \\  /  \\  /  \\  /\n*                         \\/____\\/____\\/\n*                          \\    /\\    /\n*                           \\  /3 \\  /\n*                            \\/____\\/\n*\n*                               B\n\nmidges:\n\n*           ____  ____                      ____  ____\n*         /\\    /\\    /\\                  /\\    /\\    /\\\n*        /  \\  /11\\  /  \\       U        /  \\  /5 \\  /  \\\n*       /____\\/____\\/____\\     ____     /____\\/____\\/____\\\n*       \\    /\\    /\\    /   /\\    /\\   \\    /\\    /\\    /\n*        \\  /8 \\  /7 \\  /   /  \\  /  \\   \\  /9 \\  /10\\  /\n*         \\/____\\/____\\/   /____\\/____\\   \\/____\\/____\\/\n*          \\    /\\    /   /\\    /\\    /\\   \\    /\\    /\n*           \\  /  \\  /   /  \\1 /  \\3 /  \\   \\  /  \\  /\n*            \\/____\\/   /____\\/____\\/____\\   \\/____\\/\n*                       \\    /\\    /\\    /\n*                        \\  /  \\0 /  \\  /\n*                    L    \\/____\\/____\\/    R\n*\n*                           ____  ____\n*                         /\\    /\\    /\\\n*                        /  \\  /6 \\  /  \\\n*                       /____\\/____\\/____\\\n*                       \\    /\\    /\\    /\n*                        \\  /2 \\  /4 \\  /\n*                         \\/____\\/____\\/\n*                          \\    /\\    /\n*                           \\  /  \\  /\n*                            \\/____\\/\n*\n*                               B\n\nwings:\n\n*           ____  ____                      ____  ____\n*         /\\    /\\    /\\                  /\\    /\\    /\\\n*        /  \\5 /  \\11/  \\       U        /  \\11/  \\5 /  \\\n*       /____\\/____\\/____\\     ____     /____\\/____\\/____\\\n*       \\    /\\    /\\    /   /\\    /\\   \\    /\\    /\\    /\n*        \\8 /  \\  /  \\1 /   /1 \\  /9 \\   \\9 /  \\  /  \\4 /\n*         \\/____\\/____\\/   /____\\/____\\   \\/____\\/____\\/\n*          \\    /\\    /   /\\    /\\    /\\   \\    /\\    /\n*           \\2 /  \\7 /   /7 \\  /  \\  /3 \\   \\3 /  \\10/\n*            \\/____\\/   /____\\/____\\/____\\   \\/____\\/\n*                       \\    /\\    /\\    /\n*                        \\  /0 \\  /6 \\  /\n*                    L    \\/____\\/____\\/    R\n*\n*                           ____  ____\n*                         /\\    /\\    /\\\n*                        /  \\0 /  \\6 /  \\\n*                       /____\\/____\\/____\\\n*                       \\    /\\    /\\    /\n*                        \\2 /  \\  /  \\10/\n*                         \\/____\\/____\\/\n*                          \\    /\\    /\n*                           \\8 /  \\4 /\n*                            \\/____\\/\n*\n*                               B\n\ncentres:\n\n*           ____  ____                      ____  ____\n*         /\\    /\\    /\\                  /\\    /\\    /\\\n*        /  \\  /  \\  /  \\       U        /  \\  /  \\  /  \\\n*       /____\\/____\\/____\\     ____     /____\\/____\\/____\\\n*       \\    /\\    /\\    /   /\\    /\\   \\    /\\    /\\    /\n*        \\  /  \\2 /  \\  /   /  \\  /  \\   \\  /  \\1 /  \\  /\n*         \\/____\\/____\\/   /____\\/____\\   \\/____\\/____\\/\n*          \\    /\\    /   /\\    /\\    /\\   \\    /\\    /\n*           \\  /  \\  /   /  \\  /3 \\  /  \\   \\  /  \\  /\n*            \\/____\\/   /____\\/____\\/____\\   \\/____\\/\n*                       \\    /\\    /\\    /\n*                        \\  /  \\  /  \\  /\n*                    L    \\/____\\/____\\/    R\n*\n*                           ____  ____\n*                         /\\    /\\    /\\\n*                        /  \\  /  \\  /  \\\n*                       /____\\/____\\/____\\\n*                       \\    /\\    /\\    /\n*                        \\  /  \\0 /  \\  /\n*                         \\/____\\/____\\/\n*                          \\    /\\    /\n*                           \\  /  \\  /\n*                            \\/____\\/\n*\n*                               B\n\n---\n\nfull state:\n{\n co: int[4]: corner orientation (ccw twist = 1, cw twist = 2),\n mp: int[12]: midge facelet permutation (this encodes orientation as well),\n wp: int[12]: wing permutation,\n cp: int[4]: centre permutation\n}\n\nphase 1 state:\nint[6]: locations of midge and matching wings + (CO - coset index) % 3\n\nphase 2 state:\n[\n int: edge permutation + yellow centre coordinate (0..1439),\n int: edge orientation + corner orientation coordinate (0..2591)\n]\n*/\n\nfunction compose_state(state1, state2) {\n  let co = Array(4);\n  for (let i = 0; i < 4; i++) {\n    co[i] = (state1.co[i] + state2.co[i]) % 3;\n  }\n  let mp = compose(state1.mp, state2.mp);\n  let wp = compose(state1.wp, state2.wp);\n  let cp = compose(state1.cp, state2.cp);\n  return { co: co, mp: mp, wp: wp, cp: cp };\n}\n\nfunction invert_state(state) {\n  let co = Array(4);\n  for (let i = 0; i < 4; i++) {\n    co[i] = (3 - state.co[i]) % 3;\n  }\n  let mp = invert(state.mp);\n  let wp = invert(state.wp);\n  let cp = invert(state.cp);\n  return { co: co, mp: mp, wp: wp, cp: cp };\n}\n\nlet solved = {\n  co: [0, 0, 0, 0],\n  mp: identity_permutation(12),\n  wp: identity_permutation(12),\n  cp: [0, 1, 2, 3],\n};\n\n// the single-layer moves don't affect midges (mp) or centres (cp)\nlet move_U = {\n  co: [2, 0, 0, 0],\n  mp: identity_permutation(12),\n  wp: permutation_from_cycle([1, 9, 11], 12),\n  cp: [0, 1, 2, 3],\n};\nlet move_L = {\n  co: [0, 2, 0, 0],\n  mp: identity_permutation(12),\n  wp: permutation_from_cycle([0, 7, 2], 12),\n  cp: [0, 1, 2, 3],\n};\nlet move_R = {\n  co: [0, 0, 2, 0],\n  mp: identity_permutation(12),\n  wp: permutation_from_cycle([3, 6, 10], 12),\n  cp: [0, 1, 2, 3],\n};\nlet move_B = {\n  co: [0, 0, 0, 2],\n  mp: identity_permutation(12),\n  wp: permutation_from_cycle([4, 8, 5], 12),\n  cp: [0, 1, 2, 3],\n};\n\n// the double-layer moves affect everything, but permute the midges and wings identically\nlet move_Uw = {\n  co: [2, 0, 0, 0],\n  mp: permutation_from_cycles(\n    [\n      [1, 9, 11],\n      [7, 3, 5],\n    ],\n    12,\n  ),\n  wp: permutation_from_cycles(\n    [\n      [1, 9, 11],\n      [7, 3, 5],\n    ],\n    12,\n  ),\n  cp: [0, 2, 3, 1],\n};\nlet move_Lw = {\n  co: [0, 2, 0, 0],\n  mp: permutation_from_cycles(\n    [\n      [0, 7, 2],\n      [6, 1, 8],\n    ],\n    12,\n  ),\n  wp: permutation_from_cycles(\n    [\n      [0, 7, 2],\n      [6, 1, 8],\n    ],\n    12,\n  ),\n  cp: [3, 1, 0, 2],\n};\nlet move_Rw = {\n  co: [0, 0, 2, 0],\n  mp: permutation_from_cycles(\n    [\n      [3, 6, 10],\n      [9, 0, 4],\n    ],\n    12,\n  ),\n  wp: permutation_from_cycles(\n    [\n      [3, 6, 10],\n      [9, 0, 4],\n    ],\n    12,\n  ),\n  cp: [1, 3, 2, 0],\n};\nlet move_Bw = {\n  co: [0, 0, 0, 2],\n  mp: permutation_from_cycles(\n    [\n      [4, 8, 5],\n      [10, 2, 11],\n    ],\n    12,\n  ),\n  wp: permutation_from_cycles(\n    [\n      [4, 8, 5],\n      [10, 2, 11],\n    ],\n    12,\n  ),\n  cp: [2, 0, 1, 3],\n};\n\nlet moves = [\n  move_Uw,\n  move_Lw,\n  move_Rw,\n  move_Bw,\n  move_U,\n  move_L,\n  move_R,\n  move_B,\n];\nlet move_names = [\"u\", \"l\", \"r\", \"b\", \"U\", \"L\", \"R\", \"B\"];\nconst N_MOVES = 8; // number of moves\nconst N_MOVES_PHASE2 = 4; // number of moves for phase 2\n\nfunction moves_commute(i, j) {\n  // single-layer moves always commute with each other\n  if (i >= 4 && j >= 4) {\n    return true;\n  }\n  // double-layer moves commute iff they are equal\n  if (i < 4 && j < 4) {\n    return i === j;\n  }\n  // a single-layer and a double-layer move commute iff they're on the same axis\n  return (i ^ j) === 4;\n}\n\nfunction apply_move_sequence(state, move_sequence) {\n  for (let [m, r] of move_sequence) {\n    for (let i = 0; i < r; i++) {\n      state = compose_state(state, moves[m]);\n    }\n  }\n  return state;\n}\n\nfunction stringify_move_sequence(move_sequence) {\n  let suffixes = [\"0\", \"\", \"'\"];\n  let s = move_sequence.map(([m, r]) => move_names[m] + suffixes[r]);\n  return s.join(\" \");\n}\n\nfunction print_move_sequence(move_sequence) {\n  console.log(stringify_move_sequence(move_sequence));\n}\n\nfunction generate_random_state() {\n  // master pyra has no \"nontrivial\" restrictions, beyond the usual parity stuff\n  let co = Array(4);\n  for (let i = 0; i < 4; i++) {\n    co[i] = randomUIntBelow(3);\n  }\n  let mp = index_to_evenpermutation(randomUIntBelow(factorial(6) / 2), 6);\n  for (let i = 0, parity = 0; i < 6; i++) {\n    let eo = i === 5 ? parity : randomUIntBelow(2);\n    parity ^= eo;\n    mp[i] += eo * 6;\n    mp[i + 6] = (mp[i] + 6) % 12;\n  }\n  let wp = index_to_evenpermutation(randomUIntBelow(factorial(12) / 2), 12);\n  let cp = index_to_evenpermutation(randomUIntBelow(factorial(4) / 2), 4);\n  return { co: co, mp: mp, wp: wp, cp: cp };\n}\n\nfunction generate_random_state_scramble() {\n  return solve(generate_random_state(randomUIntBelow));\n}\n\nfunction generate_scramble_sequence(tips = true, obfuscate_tips = false) {\n  let scramble_string = stringify_move_sequence(\n    generate_random_state_scramble(),\n  );\n  if (!tips) {\n    return scramble_string;\n  }\n  let tip_names = [\"u\", \"l\", \"r\", \"b\"];\n  let suffixes = [\"0\", \"\", \"'\"];\n  if (!obfuscate_tips) {\n    for (let i = 0; i < 4; i++) {\n      let x = randomUIntBelow(3);\n      if (x !== 0) {\n        scramble_string += ` ${tip_names[i]}${suffixes[x]}`;\n      }\n    }\n    return scramble_string.trim();\n  }\n  let amount = [];\n  let amount_pre = [];\n  let amount_post = [];\n  for (let i = 0; i < 4; i++) {\n    amount[i] = randomUIntBelow(3);\n    amount_pre[i] = randomUIntBelow(3);\n    amount_post[i] = (amount[i] - amount_pre[i] + 3) % 3;\n  }\n  let weight = (arr) => arr.filter((x) => x !== 0).length;\n  while (\n    !(\n      weight(amount_pre) >= 1 &&\n      weight(amount_post) >= 1 &&\n      weight(amount_pre) + weight(amount_post) >= 4\n    )\n  ) {\n    for (let i = 0; i < 4; i++) {\n      amount_pre[i] = randomUIntBelow(3);\n      amount_post[i] = (amount[i] - amount_pre[i] + 3) % 3;\n    }\n  }\n  let prepend = amount_pre\n    .map((x, i) => (x !== 0 ? `${tip_names[i]}${suffixes[x]} ` : \"\"))\n    .join(\"\");\n  let append = amount_post\n    .map((x, i) => (x !== 0 ? ` ${tip_names[i]}${suffixes[x]}` : \"\"))\n    .join(\"\");\n  return prepend + scramble_string + append;\n  // this technically has the extremely edge case of the original no-tip scramble being the\n  // trivial scramble and the resulting string will have a double space, but this is Very Rare\n}\n\nfunction solve(state) {\n  let phase1_indices = index_phase1(state);\n  let phase2_mtables = [\n    generate_phase2_permutation_mtable(),\n    generate_phase2_orientation_mtable(),\n  ];\n  let phase2_ptables = [\n    generate_phase2_permutation_ptable(),\n    generate_phase2_orientation_ptable(),\n  ];\n\n  let phase1gen = phase1_ida_solve_gen(phase1_indices);\n  let best = undefined;\n  let intermediate_states = new Set();\n  let start_time = performance.now();\n  for (let i = 0; i < 22; i++) {\n    let { value: sol1, done } = phase1gen.next();\n    let new_state = state;\n    for (let [m, r] of sol1) {\n      for (let i = 0; i < r; i++) {\n        new_state = compose_state(new_state, moves[m]);\n      }\n    }\n    let stringified_state = JSON.stringify(new_state);\n    if (intermediate_states.has(stringified_state)) {\n      // console.log(\"skip\");\n      continue;\n    } else {\n      intermediate_states.add(stringified_state);\n    }\n    let phase2_indices = index_phase2(new_state);\n    //let sol2 = [];\n    let moves_left = best ? best.length - sol1.length - 1 : 999999;\n    let sol2 = ida_solve_gen(\n      phase2_indices,\n      phase2_mtables,\n      phase2_ptables,\n      moves_left,\n    ).next().value;\n    if (sol2 === undefined) {\n      // console.log(\"prune\");\n      continue;\n    }\n    // console.log(\n    //   `to ${stringified_state} in ${sol1.length} moves; total move count ${\n    //     sol1.length + sol2.length\n    //   }`,\n    // );\n    if (best === undefined || best.length > sol1.length + sol2.length) {\n      best = sol1.concat(sol2);\n    }\n    // bail if we've spent too much time\n    if (performance.now() - start_time > 300) {\n      break;\n    }\n  }\n  return best;\n}\n\nfunction determine_V_coset(p) {\n  // p: even permutation on 4 elements\n  // NOTE: the formula depends on the centre ordering and corner orientation conventions\n  // V itself is 0, ccw coset is 1, cw coset is 2.\n  return p[3 ^ p.indexOf(3)];\n}\n\nfunction index_phase1(state) {\n  let w = compose(invert(state.mp), state.wp);\n  let c =\n    (state.co.reduce((x, y) => x + y) - determine_V_coset(state.cp) + 3) % 3;\n  return [0, 1, 2, 3, 4, 5].map(\n    (i) => i + 6 * w.indexOf(i) + 72 * w.indexOf(i + 6) + 864 * c,\n  );\n}\n\nlet phase1_permtable_m = [];\nlet phase1_permtable_minv = [];\nlet phase1_permtable_w = [];\nlet phase1_permtable_winv = [];\nfor (let i = 0; i < N_MOVES; i++) {\n  let move = moves[i];\n  phase1_permtable_m[i] = move.mp;\n  phase1_permtable_minv[i] = invert(move.mp);\n  phase1_permtable_w[i] = move.wp;\n  phase1_permtable_winv[i] = invert(move.wp);\n}\nlet phase1_c_update = [0, 0, 0, 0, 2, 2, 2, 2];\n\n/* score = (# matching wings - # flipped wings) + 12\n(the +12 is to make it have range 0..24 rather than -12..12)\n\nthis is more effective than looking at # matching wings alone, or # flipped wings alone.\n\nstats for centre/corner solved:\njs> num_by_score\n[1, 0, 0, 320, 1350, 11328, 77280, 422400, 2016735, 7808000, 23467296, 50855040, 70181300, 50855040, 23467296, 7808000, 2016735, 422400, 77280, 11328, 1350, 320, 0, 0, 1]\njs> min_by_score\n[14, 9999, 9999, 11, 11, 10, 9, 8, 8, 7, 7, 6, 4, 5, 5, 3, 4, 4, 2, 3, 4, 3, 9999, 9999, 0]\njs> max_by_score\n[14, -9999, -9999, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 11, 10, 10, 10, 9, 8, 8, 5, -9999, -9999, 0]\njs> sum_by_score\n[14, 0, 0, 3856, 16458, 131856, 904280, 4885752, 23019405, 87454032, 256924344, 542481888, 725249936, 501317616, 218566356, 67825352, 16313334, 3116472, 509352, 63600, 7854, 1288, 0, 0, 0]\n\nstats for centre/corner unsolved:\njs> min_by_score\n[13, 9999, 9999, 11, 10, 10, 9, 8, 8, 7, 7, 6, 4, 5, 5, 3, 4, 4, 2, 3, 3, 1, 9999, 9999, 6]\njs> max_by_score\n[13, -9999, -9999, 13, 13, 13, 13, 13, 13, 13, 13, 12, 13, 12, 11, 11, 10, 9, 9, 8, 8, 6, -9999, -9999, 6]\njs> sum_by_score\n[13, 0, 0, 3792, 16026, 133344, 900726, 4870308, 23008797, 87434932, 256859772, 542586948, 725077315, 501101484, 218802804, 67943128, 16250601, 3110148, 509044, 65940, 7284, 1148, 0, 0, 6]\n\n*/\n\nlet phase1_score_ptable = [\n  //-12        -9  -8  -7 -6 -5 -4 -3 -2 -1  0  1  2  3  4  5  6  7  8  9         12\n  [\n    14, -1, -1, 11, 11, 10, 9, 8, 8, 7, 7, 6, 4, 5, 5, 3, 4, 4, 2, 3, 4, 3, -1,\n    -1, 0,\n  ],\n  [\n    13, -1, -1, 11, 10, 10, 9, 8, 8, 7, 7, 6, 4, 5, 5, 3, 4, 4, 2, 3, 3, 1, -1,\n    -1, 6,\n  ],\n];\nlet phase1_score_ptable_condensed = new Int8Array(55);\nfor (let i = 0; i < 25; i++) {\n  phase1_score_ptable_condensed[i] = phase1_score_ptable[0][i];\n  phase1_score_ptable_condensed[i + 30] = phase1_score_ptable[1][i];\n}\nlet phase1_coord_to_score = new Int8Array(6 * 12 * 12 * 3);\nfor (let i = 0; i < 6; i++) {\n  for (let j = 0; j < 12; j++) {\n    for (let k = 0; k < 12; k++) {\n      let index = i + 6 * j + 72 * k;\n      let score = 2;\n      if (j === i) {\n        score++;\n      } else if (j === (i + 6) % 12) {\n        score--;\n      }\n      if (k === (i + 6) % 12) {\n        score++;\n      } else if (k === i) {\n        score--;\n      }\n      phase1_coord_to_score[index] = score;\n      phase1_coord_to_score[index + 6 * 12 * 12] = phase1_coord_to_score[\n        index + 2 * 6 * 12 * 12\n      ] = score + 5;\n    }\n  }\n}\n\nfunction phase1_benchmark() {\n  /* some 13-move phase 1 states*/\n  let phase1_test_states = [\n    [1836, 2551, 1922, 1947, 2440, 2063],\n    [1674, 1153, 1058, 1353, 1000, 1271],\n    [1764, 2497, 1904, 2001, 2242, 2087],\n    [582, 301, 566, 273, 40, 431],\n    [600, 217, 200, 477, 136, 431],\n    [60, 613, 98, 273, 214, 407],\n    [36, 265, 98, 777, 190, 431],\n    [1764, 1987, 2402, 1881, 2368, 2159],\n    [36, 277, 194, 129, 334, 431],\n    [1764, 1843, 1928, 2499, 2158, 2039],\n    [528, 721, 194, 429, 112, 275],\n    [840, 115, 182, 219, 346, 425],\n    [1752, 1831, 2498, 1989, 2416, 1943],\n    [324, 133, 554, 231, 58, 431],\n    [18, 331, 194, 495, 658, 431],\n    [1764, 1987, 1880, 2337, 2578, 2081],\n    [1776, 1855, 1934, 1989, 2050, 2231],\n    [396, 811, 194, 297, 712, 47],\n    [816, 115, 482, 273, 148, 425],\n    [972, 907, 1070, 1281, 1174, 1511],\n  ];\n  generate_phase1_pairing2c_ptable();\n  let start = performance.now();\n  for (let coords of phase1_test_states) {\n    phase1_ida_solve_gen(coords).next();\n  }\n  return performance.now() - start;\n}\n\nfunction* phase1_ida_solve_gen(coords) {\n  let bound = 0;\n  let mtable = generate_phase1_pairingc_mtable();\n  let ptable = generate_phase1_pairing2c_ptable();\n  while (true) {\n    yield* phase1_ida_search_gen(...coords, mtable, ptable, bound, -1);\n    bound++;\n  }\n}\n\nfunction* phase1_ida_search_gen(a, b, c, d, e, f, mtable, ptable, bound, last) {\n  let nmoves = N_MOVES; // = 8\n  let score =\n    phase1_coord_to_score[a] +\n    phase1_coord_to_score[b] +\n    phase1_coord_to_score[c] +\n    phase1_coord_to_score[d] +\n    phase1_coord_to_score[e] +\n    phase1_coord_to_score[f];\n  let heuristic = Math.max(\n    ptable[(a % 864) + b * 864],\n    ptable[(c % 864) + b * 864],\n    ptable[(e % 864) + b * 864],\n    ptable[(a % 864) + d * 864],\n    ptable[(c % 864) + d * 864],\n    ptable[(e % 864) + d * 864],\n    ptable[(a % 864) + f * 864],\n    ptable[(c % 864) + f * 864],\n    ptable[(e % 864) + f * 864],\n    ptable[(a % 864) + c * 864],\n    ptable[(a % 864) + e * 864],\n    ptable[(c % 864) + e * 864],\n    ptable[(b % 864) + d * 864],\n    ptable[(b % 864) + f * 864],\n    ptable[(d % 864) + f * 864],\n    phase1_score_ptable_condensed[score],\n  );\n  if (heuristic > bound) {\n    return;\n  }\n  if (bound === 0) {\n    yield [];\n    return;\n  }\n  if (heuristic === 0 && bound === 1) {\n    return;\n  }\n  for (let m = 0; m < nmoves; m++) {\n    if (m === last) {\n      continue;\n    }\n    if (m < last && moves_commute(m, last)) {\n      continue;\n    }\n    let A = a;\n    let B = b;\n    let C = c;\n    let D = d;\n    let E = e;\n    let F = f;\n    for (let r = 1; r <= 2; r++) {\n      A = mtable[A][m];\n      B = mtable[B][m];\n      C = mtable[C][m];\n      D = mtable[D][m];\n      E = mtable[E][m];\n      F = mtable[F][m];\n      let subpath_gen = phase1_ida_search_gen(\n        A,\n        B,\n        C,\n        D,\n        E,\n        F,\n        mtable,\n        ptable,\n        bound - 1,\n        m,\n      );\n      while (true) {\n        let { value: subpath, done } = subpath_gen.next();\n        if (done) {\n          break;\n        }\n        yield [[m, r]].concat(subpath);\n      }\n    }\n  }\n}\n\nfunction index_phase2(state) {\n  let edges = state.mp;\n  let ep = evenpermutation_to_index(edges.slice(0, 6).map((x) => x % 6));\n  let eo = edges\n    .slice(0, 5)\n    .map((x, i) => (x >= 6) * 2 ** i)\n    .reduce((x, y) => x + y);\n  let co = state.co.map((x, i) => x * 3 ** i).reduce((x, y) => x + y);\n  let cloc = state.cp.indexOf(0);\n  return [ep + 360 * cloc, eo + 32 * co];\n}\n\nlet tables = {};\n\nfunction generate_phase1_pairing_mtable() {\n  if (tables.phase1pm) {\n    return tables.phase1pm;\n  }\n  let mtable = Array(6 * 12 * 12)\n    .fill()\n    .map(() => Array(N_MOVES).fill(-1));\n  for (let midge = 0; midge < 6; midge++) {\n    for (let wingl = 0; wingl < 12; wingl++) {\n      for (let wingh = 0; wingh < 12; wingh++) {\n        if (wingl === wingh) {\n          continue;\n        }\n        let index = midge + 6 * wingl + 72 * wingh;\n        for (let m = 0; m < N_MOVES; m++) {\n          let new_midge = phase1_permtable_minv[m][midge];\n          let new_wingl = phase1_permtable_winv[m][wingl];\n          let new_wingh = phase1_permtable_winv[m][wingh];\n          if (new_midge < 6) {\n            mtable[index][m] = new_midge + 6 * new_wingl + 72 * new_wingh;\n          } else {\n            mtable[index][m] = new_midge - 6 + 6 * new_wingh + 72 * new_wingl;\n          }\n        }\n      }\n    }\n  }\n  return (tables.phase1pm = mtable);\n}\n\nfunction generate_phase1_pairingc_mtable() {\n  if (tables.phase1pcm) {\n    return tables.phase1pcm;\n  }\n  let mtable_pairing = generate_phase1_pairing_mtable();\n  let mtable = Array(mtable_pairing.length * 3)\n    .fill()\n    .map(() => Array(N_MOVES).fill(-1));\n  for (let index = 0; index < mtable_pairing.length; index++) {\n    for (let m = 0; m < N_MOVES; m++) {\n      let new_index = mtable_pairing[index][m];\n      mtable[index][m] = new_index + 6 * 12 * 12 * phase1_c_update[m];\n      mtable[index + 6 * 12 * 12][m] =\n        new_index + 6 * 12 * 12 * ((phase1_c_update[m] + 1) % 3);\n      mtable[index + 2 * 6 * 12 * 12][m] =\n        new_index + 6 * 12 * 12 * ((phase1_c_update[m] + 2) % 3);\n    }\n  }\n  return (tables.phase1pcm = mtable);\n}\n\nfunction generate_phase1_pairing2c_ptable() {\n  if (tables.phase1p2cp) {\n    return tables.phase1p2cp;\n  }\n  let mtable_noc = generate_phase1_pairing_mtable();\n  let mtable = generate_phase1_pairingc_mtable();\n  let ptable = new Int8Array((6 * 12 * 12) ** 2 * 3);\n  ptable.fill(-1);\n  let g = [0, 1, 2, 3, 4, 5].map((x) => x + 6 * x + 72 * (x + 6));\n  for (let i = 0; i < 6; i++) {\n    for (let j = 0; j < 6; j++) {\n      if (i === j) {\n        continue;\n      }\n      ptable[g[i] + 864 * g[j]] = 0;\n    }\n  }\n  let dist = 0;\n  while (true) {\n    let changed = false;\n    for (let index = 0; index < ptable.length; index++) {\n      if (ptable[index] !== dist) {\n        continue;\n      }\n      let index0 = index % 864;\n      let index1 = Math.floor(index / 864);\n      for (let m = 0; m < N_MOVES; m++) {\n        let new_index0 = index0;\n        let new_index1 = index1;\n        for (let r = 1; r <= 2; r++) {\n          new_index0 = mtable_noc[new_index0][m];\n          new_index1 = mtable[new_index1][m];\n          let new_index = new_index0 + 864 * new_index1;\n          if (ptable[new_index] === -1) {\n            changed = true;\n            ptable[new_index] = dist + 1;\n          }\n        }\n      }\n    }\n    if (!changed) {\n      break;\n    }\n    dist++;\n  }\n  return (tables.phase1p2cp = ptable);\n}\n\nfunction generate_phase1_full_ptable() {\n  // extremely slow, do not use\n  if (tables.phase1p) {\n    return tables.phase1p;\n  }\n  const HALFFACT12 = factorial(12) / 2;\n  const SIZE = HALFFACT12 * 3;\n  let ptable = new Int8Array(SIZE).fill(-1);\n  ptable[0] = 0;\n  let dist = 0;\n  let perm = new Int8Array(12);\n  let new_perm = new Int8Array(12);\n  while (true) {\n    let changed = false;\n    let count = 0;\n    for (let index = 0; index < SIZE; index++) {\n      if (ptable[index] !== dist) {\n        continue;\n      }\n      count++;\n      let cindex = index % 3;\n      let windex = (index - cindex) / 3;\n      index_to_evenpermutation12(windex, perm);\n      for (let m = 0; m < N_MOVES; m++) {\n        let move_m = phase1_permtable_m[m];\n        let move_minv = phase1_permtable_minv[m];\n        let move_w = phase1_permtable_w[m];\n        let move_winv = phase1_permtable_winv[m];\n        {\n          // clockwise move\n          let new_cindex = (cindex + phase1_c_update[m]) % 3;\n          for (let i = 0; i < 12; i++) {\n            new_perm[i] = move_minv[perm[move_w[i]]];\n          }\n          let new_windex = evenpermutation12_to_index(new_perm);\n          let new_index = new_cindex + 3 * new_windex;\n          if (ptable[new_index] === -1) {\n            changed = true;\n            ptable[new_index] = dist + 1;\n          }\n        }\n        {\n          // anticlockwise move\n          let new_cindex = (cindex + 3 - phase1_c_update[m]) % 3;\n          for (let i = 0; i < 12; i++) {\n            new_perm[i] = move_m[perm[move_winv[i]]];\n          }\n          let new_windex = evenpermutation12_to_index(new_perm);\n          let new_index = new_cindex + 3 * new_windex;\n          if (ptable[new_index] === -1) {\n            changed = true;\n            ptable[new_index] = dist + 1;\n          }\n        }\n      }\n    }\n    console.log(`${count} nodes at depth ${dist}`);\n    if (!changed) {\n      break;\n    }\n    dist++;\n  }\n  return (tables.phase1p = ptable);\n}\n\nfunction generate_phase2_permutation_mtable() {\n  if (tables.phase2pm) {\n    return tables.phase2pm;\n  }\n  let mtable = Array(1440)\n    .fill()\n    .map(() => Array(N_MOVES_PHASE2));\n  for (let ep = 0; ep < 360; ep++) {\n    let perm = index_to_evenpermutation(ep, 6);\n    // fill in the \"opposite\" values\n    for (let i = 0; i < 6; i++) {\n      perm[i + 6] = perm[i] + 6;\n    }\n    for (let m = 0; m < N_MOVES_PHASE2; m++) {\n      let new_perm = compose(perm, moves[m].mp);\n      let new_ep = evenpermutation_to_index(\n        new_perm.slice(0, 6).map((x) => x % 6),\n      );\n      for (let new_cloc = 0; new_cloc < 4; new_cloc++) {\n        let cloc = moves[m].cp[new_cloc];\n        mtable[ep + 360 * cloc][m] = new_ep + 360 * new_cloc;\n      }\n    }\n  }\n  return (tables.phase2pm = mtable);\n}\n\nfunction generate_phase2_orientation_mtable() {\n  if (tables.phase2om) {\n    return tables.phase2om;\n  }\n  let mtable = Array(32 * 81)\n    .fill()\n    .map(() => Array(N_MOVES_PHASE2));\n  for (let eo = 0; eo < 32; eo++) {\n    let eo_array = [0, 1, 2, 3, 4].map((i) => (eo >> i) & 1);\n    eo_array[5] = eo_array.reduce((x, y) => x ^ y);\n    let perm = [];\n    for (let i = 0; i < 6; i++) {\n      perm[i] = i + 6 * eo_array[i];\n      perm[i + 6] = i + 6 * (eo_array[i] ^ 1);\n    }\n    for (let co = 0; co < 81; co++) {\n      let co_array = [0, 1, 2, 3].map((i) => Math.floor(co / 3 ** i) % 3);\n      for (let m = 0; m < N_MOVES_PHASE2; m++) {\n        let new_perm = compose(perm, moves[m].mp);\n        let new_eo_array = new_perm.slice(0, 5).map((x) => +(x >= 6));\n        let new_eo = 0;\n        for (let i = 0; i < 5; i++) {\n          new_eo += new_eo_array[i] << i;\n        }\n        let new_co_array = co_array.map((x, i) => (x + moves[m].co[i]) % 3);\n        let new_co = 0;\n        for (let i = 0; i < 4; i++) {\n          new_co += new_co_array[i] * 3 ** i;\n        }\n        mtable[eo + 32 * co][m] = new_eo + 32 * new_co;\n      }\n    }\n  }\n  return (tables.phase2om = mtable);\n}\n\nfunction generate_phase2_permutation_ptable() {\n  if (tables.phase2pp) {\n    return tables.phase2pp;\n  }\n  return (tables.phase2pp = bfs(generate_phase2_permutation_mtable(), [0]));\n}\n\nfunction generate_phase2_orientation_ptable() {\n  if (tables.phase2op) {\n    return tables.phase2op;\n  }\n  return (tables.phase2op = bfs(generate_phase2_orientation_mtable(), [0]));\n}\n\nfunction bfs(mtable, goal_states) {\n  let N = mtable.length;\n  let nmoves = mtable[0].length;\n  let ptable = Array(N).fill(-1);\n  let queue = goal_states.slice();\n  let new_queue = [];\n  let depth = 0;\n  while (queue.length > 0) {\n    new_queue.length = 0;\n    for (let state of queue) {\n      if (ptable[state] !== -1) {\n        continue;\n      }\n      ptable[state] = depth;\n      for (let move_index = 0; move_index < nmoves; move_index++) {\n        let new_state = mtable[state][move_index];\n        while (new_state !== state) {\n          new_queue.push(new_state);\n          new_state = mtable[new_state][move_index];\n        }\n      }\n    }\n    [queue, new_queue] = [new_queue, queue];\n    depth += 1;\n  }\n  return ptable;\n}\n\nfunction* ida_solve_gen(indices, mtables, ptables, moves_left) {\n  let ncoords = indices.length;\n  let bound = 0;\n  for (let i = 0; i < ncoords; i++) {\n    bound = Math.max(bound, ptables[i][indices[i]]);\n  }\n  while (bound <= moves_left) {\n    yield* ida_search_gen(indices, mtables, ptables, bound, -1);\n    bound++;\n  }\n}\n\nfunction* ida_search_gen(indices, mtables, ptables, bound, last) {\n  let ncoords = indices.length;\n  let nmoves = mtables[0][0].length;\n  let heuristic = 0;\n  for (let i = 0; i < ncoords; i++) {\n    heuristic = Math.max(heuristic, ptables[i][indices[i]]);\n  }\n  if (heuristic > bound) {\n    return;\n  }\n  if (bound === 0) {\n    yield [];\n    return;\n  }\n  if (heuristic === 0 && bound === 1) {\n    return;\n  }\n  for (let m = 0; m < nmoves; m++) {\n    if (m === last) {\n      continue;\n    }\n    if (m < last && moves_commute(m, last)) {\n      continue;\n    }\n    let new_indices = indices.slice();\n    for (let c = 0; c < ncoords; c++) {\n      new_indices[c] = mtables[c][indices[c]][m];\n    }\n    let r = 1;\n    while (indices.some((_, i) => indices[i] !== new_indices[i])) {\n      let subpath_gen = ida_search_gen(\n        new_indices,\n        mtables,\n        ptables,\n        bound - 1,\n        m,\n      );\n      while (true) {\n        let { value: subpath, done } = subpath_gen.next();\n        if (done) {\n          break;\n        }\n        yield [[m, r]].concat(subpath);\n      }\n      for (let c = 0; c < ncoords; c++) {\n        new_indices[c] = mtables[c][new_indices[c]][m];\n      }\n      r++;\n    }\n  }\n}\n\nexport async function randomMasterTetraminxScrambleString() {\n  return generate_scramble_sequence(false);\n}\n"],
  "mappings": "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",
  "names": ["evenpermutation12_to_index", "index_to_evenpermutation12", "i"]
}
