import { A as Alg } from './Alg.d-Qi_gM3ue.js';
import { K as KPattern, s as KPuzzle } from './KPattern.d-1RSDwKrh.js';

declare enum PrefetchLevel {
    Auto = "auto",
    None = "none",
    Immediate = "immediate"
}

declare function randomScrambleForEvent(eventID: string): Promise<Alg>;
declare function experimentalSolve3x3x3IgnoringCenters(pattern: KPattern): Promise<Alg>;
declare function experimentalSolve2x2x2(pattern: KPattern): Promise<Alg>;
declare function solveSkewb(pattern: KPattern): Promise<Alg>;
declare function solvePyraminx(pattern: KPattern): Promise<Alg>;
declare function solveMegaminx(pattern: KPattern): Promise<Alg>;
interface SolveTwsearchOptions {
    generatorMoves?: string[];
    startPattern?: KPattern;
    minDepth?: number;
}
declare function solveTwsearch(kpuzzle: KPuzzle, pattern: KPattern, options?: SolveTwsearchOptions): Promise<Alg>;
interface SearchOutsideDebugGlobals {
    logPerf: boolean;
    scramblePrefetchLevel: `${PrefetchLevel}`;
    disableStringWorker: boolean;
    forceNewWorkerForEveryScramble: boolean;
    showWorkerInstantiationWarnings: boolean;
}
declare function setSearchDebug(options: Partial<SearchOutsideDebugGlobals>): void;

export { experimentalSolve2x2x2 as a, solvePyraminx as b, solveMegaminx as c, setSearchDebug as d, experimentalSolve3x3x3IgnoringCenters as e, solveTwsearch as f, randomScrambleForEvent as r, solveSkewb as s };
